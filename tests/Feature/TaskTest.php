<?php

namespace Tests\Feature;

use App\Models\Task;
use App\Models\TaskStatus;
use App\Models\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TaskTest extends TestCase
{
    use RefreshDatabase;
    
    public User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }

    public function testStore(): void
    {
        $response = $this->actingAs($this->user)->get('/tasks');
        $response->assertOk();

        $response = $this->actingAs($this->user)->get('/tasks/create');
        $response->assertOk();

        $name = 'новая17 ' . time();
        $this->actingAs($this->user)->post('/task_statuses', [
            'name' => $name,
        ]);
        $status = TaskStatus::orderByDesc('created_at')->first();

        if ($status !== null) {
            $taskName = 'Первая задача ' . time();
            $response = $this->actingAs($this->user)
                ->post('/tasks', [
                    'name' => $taskName,
                    'description' => 'Описание первой задачи',
                    'status_id' => $status->id,
                    'created_by_id' => $this->user->id,
                    'assigned_to_id' => $this->user->id,
                ]);
            $response->assertRedirect('/tasks');
            $task = Task::orderByDesc('created_at')->first();
            if ($task !== null) {
                $this->assertSame($taskName, $task->name);
                $this->assertSame('Описание первой задачи', $task->description);
                $this->assertSame($status->id, $task->status_id);
                $this->assertSame($this->user->id, $task->created_by_id);
                $this->assertSame($this->user->id, $task->assigned_to_id);
            }
        }
    }

    public function testUpdate(): void
    {
        $this->actingAs($this->user)
            ->post('/task_statuses', [
                'name' => 'тестовая',
            ]);
        $statusId = TaskStatus::all()->sortByDesc('id')->first()->id ?? null;
        $name = 'тестовая задача ' . time();
        $response = $this->actingAs($this->user)
            ->post('/tasks', [
                'name' => $name,
                'description' => 'Описание обновленной задачи',
                'status_id' => $statusId,
                'created_by_id' => $this->user->id,
                'assigned_to_id' => $this->user->id,
            ]);

        $response->assertRedirect('/tasks');
        $id = Task::all()->sortByDesc('id')->first()->id ?? null;

        $this->actingAs($this->user)
            ->post('/task_statuses', [
                'name' => 'новая2',
            ]);
        $newStatusId = TaskStatus::all()->sortByDesc('id')->first()->id ?? null;
        $taskName = 'Измененная ' . time();
        $newResponse = $this->actingAs($this->user)
            ->patch("/tasks/{$id}", [
                'name' => $taskName,
                'description' => 'Описание измененной задачи',
                'status_id' => $newStatusId,
            ]);

        $newResponse->assertRedirect('/tasks');
        $newTask = Task::all()->sortByDesc('id')->first();
        if ($newTask !== null) {
            $this->assertSame($taskName, $newTask->name);
            $this->assertSame('Описание измененной задачи', $newTask->description);
            $this->assertSame($newStatusId, $newTask->status_id);
        }
    }

    public function testEdit(): void
    {
        $statusId = TaskStatus::orderByDesc('id')->limit(1)->first()->id ?? null;
        $name = 'сделать выгрузку ' . time();
        $response = $this->actingAs($this->user)
            ->post('/tasks', [
                'name' => $name,
                'description' => 'Выгрузка из Excel',
                'status_id' => $statusId,
                'created_by_id' => $this->user->id,
                'assigned_to_id' => $this->user->id,
            ]);

        $response->assertRedirect('/tasks');
        $taskId = Task::all()->sortByDesc('id')->first()->id ?? null;

        $newResponse = $this->actingAs($this->user)
            ->get("/tasks/{$taskId}/edit");
        $newResponse->assertOk();

        $newTaskName = Task::all()->sortByDesc('id')->first()->name ?? '';
        $this->assertSame($name, $newTaskName);
    }

    public function testDestroy(): void
    {
        $statusId = TaskStatus::orderByDesc('id')->limit(1)->first()->id ?? null;

        $response = $this->actingAs($this->user)
            ->post('/tasks', [
                'name' => 'Задача ' . time(),
                'description' => 'Выгрузка из Excel',
                'status_id' => $statusId,
                'created_by_id' => $this->user->id,
                'assigned_to_id' => $this->user->id,
            ]);
        $taskId = Task::all()->sortByDesc('id')->first()->id ?? null;

        $newResponse = $this->actingAs($this->user)
            ->delete("/tasks/{$taskId}");
        $newResponse->assertRedirect('/tasks');
        $newTask = Task::find($taskId);
        $this->assertNull($newTask);
    }

    public function testShow(): void
    {
        $statusId = TaskStatus::orderByDesc('id')->limit(1)->first()->id ?? null;
        $name = 'сделать выгрузку2 ' . time();
        $this->actingAs($this->user)
            ->post('/tasks', [
                'name' => $name,
                'description' => 'Выгрузка из Excel, pdf',
                'status_id' => $statusId,
                'created_by_id' => $this->user->id,
                'assigned_to_id' => $this->user->id,
            ]);
        $taskId = Task::all()->sortByDesc('id')->first()->id ?? null;
        $response = $this->actingAs($this->user)->get("/tasks/{$taskId}");
        $content = $response->getContent();
        $this->assertTrue(str_contains($content !== false ? $content : '', 'Выгрузка из Excel, pdf'));
        $this->assertTrue(str_contains($content !== false ? $content : '', $name));
    }
}
