<?php

namespace Tests\Feature;

use App\Models\Task;
use App\Models\TaskStatus;
use App\Models\User;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TaskTest extends TestCase
{
    public User $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        TaskStatus::factory()->create();
    }

    public function testCreate(): void
    {
        $response = $this->actingAs($this->user)->get(route('tasks.create'));
        $response->assertOk();
    }

    public function testStore(): void
    {
        $data = Task::factory()->make()->only(['name', 'description', 'status_id', 'created_by_id', 'assigned_to_id']);

        $response = $this->actingAs(User::find($data['created_by_id']))
            ->withSession(['banned' => false])
            ->post(route('tasks.store'), $data);

        $response->assertRedirect(route('tasks.index'));
        $this->assertDatabaseHas('tasks', $data);
    }

    public function testUpdate(): void
    {
        $task = Task::factory()->create()->toArray();
        $data = Task::factory()->make()->only(['name', 'description', 'status_id', 'assigned_to_id']);

        $newResponse = $this->actingAs(User::find($task['created_by_id']))
            ->withSession(['banned' => false])
            ->patch(route('tasks.update', $task['id']), $data);

        $newResponse->assertRedirect(route('tasks.index'));
        $this->assertDatabaseHas('tasks', $data);
    }

    public function testEdit(): void
    {
        $task = Task::factory()->create()->toArray();
        $newResponse = $this->actingAs(User::find($task['created_by_id']))
            ->get(route('tasks.edit', $task['id']));
        $newResponse->assertOk();
        $this->assertDatabaseHas('tasks', Arr::only($task, [
            'name',
            'description',
            'status_id',
            'created_by_id',
            'assigned_to_id'
        ]));
    }

    public function testDestroy(): void
    {
        $task = Task::factory()->create()->toArray();
        $newResponse = $this->actingAs(User::find($task['created_by_id']))
            ->withSession(['banned' => false])
            ->delete(route('tasks.destroy', $task['id']));

        $newResponse->assertRedirect(route('tasks.index'));

        $this->assertDatabaseMissing(
            'tasks',
            Arr::only($task, [
                'name',
                'description',
                'status_id',
                'assigned_to_id',
            ])
        );
    }

    public function testShow(): void
    {
        $task = Task::factory()->create()->toArray();
        $response = $this->actingAs(User::find($task['created_by_id']))->get(route('tasks.show', $task['id']));
        $content = $response->getContent();
        $this->assertTrue(str_contains($content !== false ? $content : '', $task['description']));
        $this->assertTrue(str_contains($content !== false ? $content : '', $task['name']));
    }
}
